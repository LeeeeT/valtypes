[tool.poetry]
name = "valtypes"
version = "5.0.0"
description = "Parsing in Python has never been easier"
authors = ["LeeeeT <leeeet@inbox.ru>"]
license = "Unlicense"
readme = "README.md"
homepage = "https://github.com/LeeeeT/valtypes"
repository = "https://github.com/LeeeeT/valtypes"
classifiers = [
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology",
    "License :: OSI Approved :: The Unlicense (Unlicense)",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3 :: Only",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Internet",
    "Typing :: Typed"
]

[tool.poetry.dependencies]
python = "^3.10"

[tool.poetry.group.dev.dependencies]
pre-commit = "^2.20.0"
isort = "^5.10.1"
sort-all = "^1.2.0"
black = "^22.8.0"
pyproject-flake8 = "^0.0.1a5"
mypy = "^0.971"
pyright = "^1.1.274"
pytest = "^7.1.3"
pytest-cov = "^3.0.0"
mkdocs-material = "^8.4.3"

[tool.isort]
profile = "black"
line_length = 151

[tool.black]
target-version = ["py310"]
line-length = 151

[tool.flake8]
max-line-length = 151
ignore = "E203, W503, F402"

[tool.mypy]
files = ["valtypes", "tests"]
strict = true
strict_equality = false
warn_return_any = false
warn_no_return = false
warn_redundant_casts = false
no_warn_unused_ignores = true

[tool.pyright]
include = ["valtypes", "tests"]
strictListInference = true
strictDictionaryInference = true
strictSetInference = true
strictParameterNoneValue = true
enableTypeIgnoreComments = true
reportMissingModuleSource = true
reportMissingImports = true
reportUndefinedVariable = true
reportAssertAlwaysTrue = true
reportInvalidStringEscapeSequence = true
reportInvalidTypeVarUse = true
reportMissingTypeStubs = true
reportSelfClsParameterName = true
reportUnsupportedDunderAll = true
reportUnusedExpression = false
reportWildcardImportFromLibrary = true
reportGeneralTypeIssues = true
reportOptionalSubscript = true
reportOptionalMemberAccess = true
reportOptionalCall = true
reportOptionalIterable = true
reportOptionalContextManager = true
reportOptionalOperand = true
reportTypedDictNotRequiredAccess = true
reportPrivateImportUsage = true
reportUnboundVariable = true
reportUnusedCoroutine = true
reportConstantRedefinition = true
reportDuplicateImport = true
reportFunctionMemberAccess = true
reportImportCycles = false
reportIncompatibleMethodOverride = true
reportIncompatibleVariableOverride = true
reportIncompleteStub = true
reportInconsistentConstructor = true
reportInvalidStubStatement = true
reportMatchNotExhaustive = true
reportMissingParameterType = true
reportMissingTypeArgument = true
reportOverlappingOverload = true
reportPrivateUsage = true
reportUnknownArgumentType = true
reportUnknownLambdaType = true
reportUnknownMemberType = false
reportUnknownParameterType = true
reportUnknownVariableType = true
reportUnnecessaryCast = true
reportUnnecessaryComparison = true
reportUnnecessaryIsInstance = false
reportUnusedClass = true
reportUnusedImport = true
reportUnusedFunction = false
reportUnusedVariable = true
reportUntypedBaseClass = true
reportUntypedClassDecorator = true
reportUntypedFunctionDecorator = true
reportUntypedNamedTuple = true
reportCallInDefaultInitializer = false
reportImplicitStringConcatenation = true
reportMissingSuperCall = false
reportPropertyTypeMismatch = true
reportUninitializedInstanceVariable = false
reportUnnecessaryTypeIgnoreComment = false
reportUnusedCallResult = false

[tool.pytest.ini_options]
testpaths = ["tests"]
addopts = "--cov=valtypes --cov-report xml"

[tool.coverage.run]
branch = true
source = ["valtypes"]

[tool.coverage.report]
fail_under = 100
skip_covered = true
exclude_lines = ["^\\s*\\.\\.\\.$", "^\\s*if TYPE_CHECKING:$", "^\\s*pass$"]

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
